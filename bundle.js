!function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=1)}([,function(t,n,e){"use strict";var r=e(2),i=e(3),o=new r.Calendar("TJ Maxx","jessephilip","google"),s=o.getCalendarId();console.log("newCalendar: ",o);var a=new i.CalendarEvent("TJ Smaxx","Bored",1,s,12,15);console.log("newEvent: "+a+". "+a.getEventId())},function(t,n,e){"use strict";var r=function(){function t(t,n,e,r){void 0===t&&(t="unknown"),void 0===n&&(n="unknown"),void 0===e&&(e="unknown"),void 0===r&&(r="blue");var i=this;this.getName=function(){return i.name},this.getCalendarId=function(){return i.calendarId},this.getCalendarUser=function(){return i.calendarUser},this.getType=function(){return i.type},this.getColor=function(){return i.color},this.getEvents=function(){return i.events},this.setName=function(t){i.name=t},this.setCalendarId=function(t){i.calendarId=t},this.setCalendarUser=function(t){i.calendarUser=t},this.setType=function(t){i.type=t},this.setColor=function(t){i.color=t},this.setEvents=function(t){i.events=t},this.createCalendarId=function(){for(var t="c",n=0;n<10;n++)t+=Math.floor(9*Math.random()).toString();return t+=Date.now().toString(),console.log("EventId: "+t),t},this.createMinutes=function(){for(var t,n=0;n<60;n++){var e={status:"",event:""};t.push(e)}return t},this.createHour=function(){return{minutes:i.createMinutes()}},this.name=t,this.calendarId=this.createCalendarId(),this.calendarUser=n,this.type=e,this.color=r}return t.prototype.addEvent=function(t){var n=this.getEvents();n.push(t),this.setEvents(n),console.log("Event added to "+this.name+" calendar.")},t.prototype.deleteEvent=function(t){for(var n=t.getEventId(),e=0;e<this.events.length;e++){if(t.getEventId()!=this.events[e].getEventId())return new Error("Error finding eventId "+n+" in "+this.name+".");this.events.splice(e)}return console.log("Event "+n+" removed from the events on calendar "+this.name+"."),!0},t}();n.Calendar=r},function(t,n,e){"use strict";var r=function(){function t(t,n,e,r,i,o){void 0===t&&(t="unknown"),void 0===n&&(n="unknown"),void 0===e&&(e=1),void 0===r&&(r="unknown");var s=this;this.getName=function(){return s.name},this.getDescription=function(){return s.description},this.getPriority=function(){return s.priority},this.getEventId=function(){return s.eventId},this.getCalendarId=function(){return s.calendarId},this.getStartTime=function(){return s.startTime},this.getEndTime=function(){return s.endTime},this.setName=function(t){s.name=t},this.setDescription=function(t){s.description=t},this.setPriority=function(t){s.priority=t},this.setCalendarId=function(t){s.calendarId=t},this.setStartTime=function(t){s.startTime=t},this.setEndTime=function(t){s.endTime=t},this.createEventId=function(){for(var t="e",n=0;n<10;n++)t+=Math.floor(9*Math.random()).toString();return t+=Date.now().toString(),console.log("EventId: "+t),t},this.name=t,this.description=n,this.priority=e,this.eventId=this.createEventId(),this.calendarId=r,this.startTime=i,this.endTime=o}return t}();n.CalendarEvent=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,